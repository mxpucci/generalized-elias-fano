add_library(gef gef.cpp)
add_library(gef::gef ALIAS gef)

# Set library properties
set_target_properties(gef PROPERTIES
    VERSION ${PROJECT_VERSION}
    SOVERSION ${PROJECT_VERSION_MAJOR}
    EXPORT_NAME gef
)

target_include_directories(gef
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)

# Link against sdsl publicly so consumers get access to sdsl functionality
# This is appropriate for a library that exposes sdsl types in its interface
target_link_libraries(gef PUBLIC sdsl)

add_executable(ugef ugef.cpp)
target_compile_options(ugef PRIVATE -D_FILE_OFFSET_BITS=64)
target_link_libraries(ugef PRIVATE gef)

add_executable(rle_gef rle_gef.cpp)
target_compile_options(rle_gef PRIVATE -D_FILE_OFFSET_BITS=64)
target_link_libraries(rle_gef PRIVATE gef)

add_executable(bgef bgef.cpp)
target_compile_options(bgef PRIVATE -D_FILE_OFFSET_BITS=64)
target_link_libraries(bgef PRIVATE gef)

add_executable(bgef_no_rle bgef_no_rle.cpp)
target_compile_options(bgef_no_rle PRIVATE -D_FILE_OFFSET_BITS=64)
target_link_libraries(bgef_no_rle PRIVATE gef)

# After
add_executable(lcp lcp.cpp)
target_compile_options(lcp PRIVATE -D_FILE_OFFSET_BITS=64)

# This is the correct way to link.
# We link to 'gef' for your library's code.
# We ALSO link directly to the 'divsufsort' targets because the main 'sdsl'
# library does not correctly propagate them as a dependency.
target_link_libraries(lcp PRIVATE gef divsufsort divsufsort64)